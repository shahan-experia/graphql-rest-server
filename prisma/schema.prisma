// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(uuid())
  username  String
  password  String
  role      AdminRole @default(MANAGER)
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AdminRole {
  SYSTEM
  MANAGER
}

model User {
  id           String        @id @default(uuid())
  firebaseUID  String?
  username     String?
  password     String?
  avatar       String?
  fullName     String?
  email        String?
  cell         String?
  gender       Gender?
  signUpType   SignUpType    @default(LOCAL)
  heads        Head[]
  transactions Transaction[]
  entries      Entry[]
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum SignUpType {
  LOCAL
  FACEBOOK
  GOOGLE
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

model Head {
  id             String   @id @default(uuid())
  name           String
  nature         Nature
  parent         Head?    @relation(name: "ParentToChildren", fields: [parentId], references: [id])
  parentId       String?
  isTransactable Boolean  @default(false)
  children       Head[]   @relation(name: "ParentToChildren")
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  entries        Entry[]
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Nature {
  ASSET
  EXPENSE
  LIABILITY
  EQUITY
  REVENUE
}

model Entry {
  id          String       @id @default(uuid())
  type        EntryType
  amount      Float
  description String
  head        Head         @relation(fields: [headId], references: [id])
  headId      String
  debit       Transaction? @relation(name: "Debit", fields: [debitId], references: [id])
  debitId     String?
  credit      Transaction? @relation(name: "Credit", fields: [creditId], references: [id])
  creditId    String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum EntryType {
  DEBIT
  CREDIT
}

model Transaction {
  id        String   @id @default(uuid())
  debits    Entry[]  @relation(name: "Debit")
  credits   Entry[]  @relation(name: "Credit")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
